// Program Counter
module Program_Counter(clk,reset,PC_in,PC_out);
input clk,reset; 
input [31:0] PC_in;
output reg [31:0] PC_out;
always @(posedge clk or posedge reset)
begin 
if(reset)
        PC_out <= 32'b00;
else 
        PC_out <= PC_in;
end        
endmodule;

// PC + 4
module PCplus4(input fromPC,NextoPC);
input [31:0] fromPC;
output [31:0] NextoPC;
assign NextoPC = 4 + fromPC;
endmodule;

// Instruction_Memory
module Instruction_Memory(clk,reset,read_address,instruction_out);
input clk,reset;
input [31:0] read_address;
output reg [31:0] instrcution_out;
integer k;

reg [31:0] I_Mem[63:0];
always @(posedge clk or posedge reset)
begin 
if(reset)
        begin 
             for(k = 0; k < 64; k = k + 1;)begin 
             I_Mem[k] <= 32'b00;
             end
        end
else 
        instrcution_out <= I_Mem[read_address];
end
endmodule;

// Register File
module RegisterFile(clk,reset,RegWrite,Rs1,Rs2,Rd,Write_data,read_data1,read_data2);
input clk,reset,RegWrite;
input [4:0] Rs1,Rs2,Rd;
input [31:0] Write_data;
output [31:0] read_data1,read_data2;
integer k;

reg [31:0] Registers[31:0];
always @(posedge clk or posedge reset)
begin 
if (reset) 
          begin 
               for (k = 0; k <= 32; k = k + 1)begin 
               Registers[k] <= 32'b00;
               end
          end
else if (RegWrite)begin 
        Registers[Rd] <= Write_data;
end
end
assign read_data1 = Registers[Rs1];
assign read_data2 = Registers[Rs2];

endmodule;

// Immediate Generator
module ImmGen(Opcode,instruction,ImmExt);
input [6:0] Opcode;
input [31:0] instruction;
output [31:0] ImmExt;

always @(*)
begin 
        case(Opcode)
        7'b00000011 : ImmExt = {{20{instruction[31]}},instruction[31:20]};
        7'b01000011 : ImmExt = {{20{instruction[31]}},instruction[31:25],instruction{11:7}};
        7'b11000011 : ImmExt = {{19{instruction[31]}},instruction[31],instruction[30:25],instruction[11:8],1'b0};
        endcase
end
endmodule

// Control Unit
module Control_unit (instruction,Branch,MemRead,MemtoReg,ALUOp,MemWrite,ALUSrc,RegWrite);
input [6:0] instruction;
output Branch,MemRead,MemtoReg,MemWrite,ALUSrc,RegWrite;
output [1:0] ALUOp;

always @(*)
begin 
          case(instruction)
          7'b0110011 : {ALUSrc,MemtoReg,RegWrite,MemRead,MemWrite,Branch,ALUOp} <= 8'b001000_01;
          7'b0000011 : {ALUSrc,MemtoReg,RegWrite,MemRead,MemWrite,Branch,ALUOp} <= 8'b111100_00;
          7'b0100011 : {ALUSrc,MemtoReg,RegWrite,MemRead,MemWrite,Branch,ALUOp} <= 8'b100010_00;
          7'b1100011 : {ALUSrc,MemtoReg,RegWrite,MemRead,MemWrite,Branch,ALUOp} <= 8'b000001_01;
          endcase
end


endmodule

// ALU
module ALU_unit(A, B, Control_in, ALU_Result, zero);

input [31:0] A, B;
input [3:0] Control_in;
output reg zero;
output reg [31:0] ALU_Result;

always @(Control_in, or A or B)
begin
    case(Control_in)
        4'b0000: begin zero <= 0; ALU_Result <= A & B; end
        4'b0001: begin zero <= 0; ALU_Result <= A | B; end
        4'b0010: begin zero <= 0; ALU_Result <= A + B; end
        4'b0110: begin if(A==B) zero <= 1; else zero <= 0; ALU_Result <= A - B; end
    endcase
end

endmodule

// ALU_Control
module ALU_Control(ALUOp, fun7, fun3, Control_out);

input fun7;
input [2:0] fun3;
input [1:0] ALUOp;
output reg [3:0] Control_out;

always @(*)
begin
    case({ALUOp, fun7, fun3})
        6'b00_0_000: Control_out <= 4'b0010;
        6'b01_0_000: Control_out <= 4'b0110;
        6'b10_0_000: Control_out <= 4'b0010;
        6'b10_1_000: Control_out <= 4'b0010;
        6'b10_0_111: Control_out <= 4'b0000;
        6'b10_0_110: Control_out <= 4'b0001;
    endcase
end

endmodule

// Data Memory
module Data_Memory(clk, reset, MemWrite, MemRead, read_address, Write_data, MemData_out);

input clk, reset, MemWrite, MemRead;
input [31:0] read_address, Write_data;
output [31:0] MemData_out;
integer k;
reg [31:0] D_Memory[63:0];

always @(posedge clk or posedge reset)
begin
    if (reset)
    begin
        for(k=0; k<64; k=k+1)begin
            D_Memory[k] <= 32'bee;
        end
    end
    else if (MemWrite) begin
        D_Memory[read_address] <= Write_data;
    end
end

assign MemData_out = (MemRead)? D_Memory[read_address] : 32'bee;

endmodule

// AND logic
module AND_logic(branch, zero, and_out);

input branch, zero;
output and_out;

assign and_out = branch & zero;

endmodule

// Adder
module Adder(in_1, in_2, Sum_out);

input [31:0] in_1, in_2;
output [31:0] Sum_out;

assign Sum_out = in_1 + in_2;

endmodule

// All modules are instantiated here
module RISCV_Top(
		  input clk, rst
		); 
//....................................................................//

wire [31:0] pc_out_wire, pc_next_wire, pc_wire, decode_wire, read_data1, regtomux, WB_wire, branch_target, immgen_wire,muxtoAlu,read_data_wire,WB_data_wire;
wire RegWrite,ALUSrc, MemRead,MemWrite,MemToReg,Branch,Zero;
wire [1:0] ALUOp_wire;
wire [3:0] ALUcontrol_wire;
//....................................................................//

// Program Counter
program_counter PC(.clk(clk),.rst(rst),.pc_in(pc_wire),.pc_out(pc_out_wire));
// PC Adder
pc_adder PC_Adder(.pc_in(pc_out_wire),.pc_next(pc_next_wire));
// PC Mux
pc_mux pc_mux(.pc_in(pc_next_wire),.pc_branch(branch_target),.pc_select(Branch&Zero),.pc_out(pc_wire));
// Instruction Memory
Instruction_Memory Instr_Mem(.rst(rst),.clk(clk),.read_address(pc_out_wire),.instruction_out(decode_wire));
// Register File
Register_File Reg_File(.rst(rst), .clk(clk), .RegWrite(RegWrite), .Rs1(decode_wire[19:15]), .Rs2(decode_wire[24:20]), .Rd(decode_wire[11:7]), .Write_data(WB_data_wire), .read_data1(read_data1), .read_data2(regtomux));
// Control Unit
main_control_unit Control_Unit(.opcode(decode_wire[6:0]),.RegWrite(RegWrite),.MemRead(MemRead),.MemWrite(MemWrite),.MemToReg(MemToReg),.ALUSrc(ALUSrc),.Branch(Branch),.ALUOp(ALUOp_wire));
// ALU_Control
ALU_Control ALU_Control(.funct3(decode_wire[14:12]),.funct7(decode_wire[31:25]),.ALUOp(ALUOp_wire),.ALUcontrol_Out(ALUcontrol_wire));
// ALU
ALU ALU(.A(read_data1),.B(muxtoAlu),.ALUcontrol_In(ALUcontrol_wire),.Result(WB_wire),.Zero(Zero));
// Immediate Generator
immediate_generator Imm_Gen(.instruction(decode_wire),.imm_out(immgen_wire));
// ALU Mux
MUX2to1 Imm_Mux(.input0(regtomux),.input1(immgen_wire),.select(ALUSrc),.out(muxtoAlu));
// Data Memory
Data_Memory Data_Mem(.clk(clk),.rst(rst),.MemRead(MemRead),.MemWrite(MemWrite),.address(WB_wire),.write_data(regtomux),.read_data(read_data_wire));
//WB Mux
MUX2to1_DataMemory WB_Mux(.input0(WB_wire),.input1(read_data_wire),.select(MemToReg),.out(WB_data_wire));
//Branch_Adder
Branch_Adder Branch_Adder(.PC(pc_out_wire), .offset(immgen_wire), .branch_target(branch_target));
//
endmodule

// Test-Bench
module RISCV_ToP_Tb;

    reg clk, rst;
    
    RISCV_Top UUT (
        .clk(clk), 
        .rst(rst)
    );

    // Clock generation
    initial begin
        clk = 0;
    end

    always #50 clk = ~clk; 

    // Reset generation
    initial begin
        rst = 1'b1;
        #50;
        rst = 1'b0; 
        #5200; 
        $finish; 
    end

    
    initial begin
        $dumpfile("waveform.vcd");  
        $dumpvars(0, UUT);          
    end

endmodule
